#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

char matrix[SIZE][SIZE] = {
    {'M', 'F', 'H', 'I', 'K'},
    {'U', 'N', 'O', 'P', 'Q'},
    {'Z', 'V', 'W', 'X', 'Y'},
    {'E', 'L', 'A', 'R', 'G'},
    {'D', 'S', 'T', 'B', 'C'}
};

char normalize(char c) {
    c = toupper(c);
    return (c == 'J') ? 'I' : c;
}

void findPosition(char ch, int *row, int *col) {
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
}

void encryptPair(char a, char b) {
    int row1, col1, row2, col2;
    findPosition(a, &row1, &col1);
    findPosition(b, &row2, &col2);

    if (row1 == row2) {
        printf("%c%c", matrix[row1][(col1 + 1) % SIZE], matrix[row2][(col2 + 1) % SIZE]);
    } else if (col1 == col2) {
        printf("%c%c", matrix[(row1 + 1) % SIZE][col1], matrix[(row2 + 1) % SIZE][col2]);
    } else {
        printf("%c%c", matrix[row1][col2], matrix[row2][col1]);
    }
}

void prepareText(char *input, char *output) {
    int len = 0;
    for (int i = 0; input[i]; i++) {
        if (isalpha(input[i])) {
            output[len++] = normalize(input[i]);
        }
    }
    output[len] = '\0';

    char temp[1000];
    int j = 0;
    for (int i = 0; i < len; i++) {
        temp[j++] = output[i];
        if (i < len - 1 && output[i] == output[i + 1]) {
            temp[j++] = 'X';
        }
    }
    if (j % 2 != 0)
        temp[j++] = 'X';
    temp[j] = '\0';

    strcpy(output, temp);
}

void encryptMessage(char *message) {
    char prepared[1000];
    prepareText(message, prepared);

    printf("Encrypted message:\n");
    for (int i = 0; prepared[i] != '\0'; i += 2) {
        encryptPair(prepared[i], prepared[i + 1]);
    }
    printf("\n");
}

int main() {
    char message[] = "Must see you over Cadogan West. Coming at once.";
    encryptMessage(message);
    return 0;
}
