#include <stdio.h>
#include <string.h>

#define SIZE 2
#define MOD 26

int modInverse(int a) {
    a = a % MOD;
    for (int x = 1; x < MOD; x++)
        if ((a * x) % MOD == 1)
            return x;
    return -1;
}

int getInverseMatrix(int key[SIZE][SIZE], int invKey[SIZE][SIZE]) {
    int det = (key[0][0]*key[1][1] - key[0][1]*key[1][0]) % MOD;
    if (det < 0) det += MOD;

    int invDet = modInverse(det);
    if (invDet == -1) return 0;

    invKey[0][0] =  key[1][1] * invDet % MOD;
    invKey[0][1] = -key[0][1] * invDet % MOD;
    invKey[1][0] = -key[1][0] * invDet % MOD;
    invKey[1][1] =  key[0][0] * invDet % MOD;

    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (invKey[i][j] < 0) invKey[i][j] += MOD;

    return 1;
}

void encrypt(char* plaintext, int key[SIZE][SIZE], char* ciphertext) {
    int len = strlen(plaintext);
    for (int i = 0; i < len; i += 2) {
        int a = plaintext[i] - 'A';
        int b = plaintext[i+1] - 'A';

        ciphertext[i]   = ((key[0][0]*a + key[0][1]*b) % MOD) + 'A';
        ciphertext[i+1] = ((key[1][0]*a + key[1][1]*b) % MOD) + 'A';
    }
    ciphertext[len] = '\0';
}

void decrypt(char* ciphertext, int key[SIZE][SIZE], char* plaintext) {
    int invKey[SIZE][SIZE];
    if (!getInverseMatrix(key, invKey)) {
        printf("Key matrix is not invertible.\n");
        return;
    }

    int len = strlen(ciphertext);
    for (int i = 0; i < len; i += 2) {
        int a = ciphertext[i] - 'A';
        int b = ciphertext[i+1] - 'A';

        plaintext[i]   = ((invKey[0][0]*a + invKey[0][1]*b) % MOD) + 'A';
        plaintext[i+1] = ((invKey[1][0]*a + invKey[1][1]*b) % MOD) + 'A';
    }
    plaintext[len] = '\0';
}


int main() {
    char plaintext[100], ciphertext[100], decrypted[100];
    int key[SIZE][SIZE] = {{3, 3}, {2, 5}};

    printf("Enter plaintext (even length, uppercase letters only): ");
    scanf("%s", plaintext);

    encrypt(plaintext, key, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);

    decrypt(ciphertext, key, decrypted);
    printf("Decrypted text: %s\n", decrypted);

    return 0;
}
