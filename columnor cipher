#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_LEN 100

// Function to get column order from the key
void getOrder(char *key, int *order) {
    int len = strlen(key);
    int taken[len];

    for (int i = 0; i < len; i++) {
        order[i] = -1;
        taken[i] = 0;
    }

    for (int i = 0, pos = 0; i < 26; i++) {
        for (int j = 0; j < len; j++) {
            if (tolower(key[j]) == 'a' + i && !taken[j]) {
                order[j] = pos++;
                taken[j] = 1;
                break;
            }
        }
    }
}

// Encrypt using columnar cipher
void encrypt(char *message, char *key) {
    int keyLen = strlen(key);
    int msgLen = strlen(message);
    int row = (msgLen + keyLen - 1) / keyLen;
    char matrix[row][keyLen];

    // Fill matrix with message
    int k = 0;
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < keyLen; j++) {
            if (k < msgLen)
                matrix[i][j] = message[k++];
            else
                matrix[i][j] = 'X';  // Padding character
        }
    }

    // Get order of columns
    int order[keyLen];
    getOrder(key, order);

    printf("Encrypted Message: ");
    for (int i = 0; i < keyLen; i++) {
        for (int j = 0; j < keyLen; j++) {
            if (order[j] == i) {
                for (int r = 0; r < row; r++) {
                    printf("%c", matrix[r][j]);
                }
                break;
            }
        }
    }
    printf("\n");
}

int main() {
    char message[MAX_LEN], key[MAX_LEN];

    printf("Enter message: ");
    fgets(message, MAX_LEN, stdin);
    message[strcspn(message, "\n")] = 0; // Remove newline

    printf("Enter key: ");
    fgets(key, MAX_LEN, stdin);
    key[strcspn(key, "\n")] = 0;

    encrypt(message, key);

    return 0;
}
