#include <stdio.h>
#include <stdint.h>
#include <string.h>
int IP[] = {
  58, 50, 42, 34, 26, 18, 10,  2,
  60, 52, 44, 36, 28, 20, 12,  4,
  62, 54, 46, 38, 30, 22, 14,  6,
  64, 56, 48, 40, 32, 24, 16,  8,
  57, 49, 41, 33, 25, 17,  9,  1,
  59, 51, 43, 35, 27, 19, 11,  3,
  61, 53, 45, 37, 29, 21, 13,  5,
  63, 55, 47, 39, 31, 23, 15,  7
};
int FP[] = {
  40,  8, 48, 16, 56, 24, 64, 32,
  39,  7, 47, 15, 55, 23, 63, 31,
  38,  6, 46, 14, 54, 22, 62, 30,
  37,  5, 45, 13, 53, 21, 61, 29,
  36,  4, 44, 12, 52, 20, 60, 28,
  35,  3, 43, 11, 51, 19, 59, 27,
  34,  2, 42, 10, 50, 18, 58, 26,
  33,  1, 41,  9, 49, 17, 57, 25
};
uint64_t permute(uint64_t input, int* table, int n) {
    uint64_t output = 0;
    for (int i = 0; i < n; i++) {
        output <<= 1;
        output |= (input >> (64 - table[i])) & 1;
    }
    return output;
}
uint32_t feistel(uint32_t half, uint64_t subkey) {
    return (half ^ (uint32_t)(subkey & 0xFFFFFFFF)); 
}
uint64_t des_encrypt(uint64_t plaintext, uint64_t key) {
    uint64_t ip = permute(plaintext, IP, 64);
    uint32_t left = (uint32_t)(ip >> 32);
    uint32_t right = (uint32_t)(ip & 0xFFFFFFFF);
    uint32_t temp = right;
    right = left ^ feistel(right, key);
    left = temp;
    uint64_t preoutput = ((uint64_t)left << 32) | right;
    uint64_t ciphertext = permute(preoutput, FP, 64);
    return ciphertext;
}

void print_binary(uint64_t val) {
    for (int i = 63; i >= 0; i--) {
        printf("%d", (val >> i) & 1);
        if (i % 8 == 0) printf(" ");
    }
    printf("\n");
}

int main() {
    uint64_t plaintext = 0x0123456789ABCDEF;
    uint64_t key       = 0x133457799BBCDFF1;
    printf("Plaintext:  ");
    print_binary(plaintext);
    uint64_t ciphertext = des_encrypt(plaintext, key);
    printf("Ciphertext: ");
    print_binary(ciphertext);
    return 0;
}
